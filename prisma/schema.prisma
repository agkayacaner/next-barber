// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean       @default(false)
  accounts      Account[]
  sessions      Session[]
  appointments  Appointment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WorkingHours {
  id   Int    @id @default(autoincrement())
  hour String
}

model Service {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Int
  duration    Int
}

model Barber {
  id            Int           @id @default(autoincrement())
  name          String
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  appointments  Appointment[]
}

model Appointment {
  id        Int     @id @default(autoincrement())
  serviceId Int
  date      String
  hour      String
  barberId  Int
  barber    Barber  @relation(fields: [barberId], references: [id])
  userEmail String
  user      User    @relation(fields: [userEmail], references: [email])
  status    Int     @default(0)
  note      String?
}
